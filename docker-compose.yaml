version: '3.8'

services:
  api:
    build:
      context: ./dockers/api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"

  zookeeper:
    image: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181

  kafka:
    image: bitnami/kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9093:9093'
      - '9094:9094'
    environment:
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@<your_host>:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  producer:
    build:
      context: .
      dockerfile: ./dockers/producer/Dockerfile
    depends_on:
      - kafka
    entrypoint: ["./wait-for-it.sh", "kafka:9092", "--", "python", "producer.py"]

  consumer:
    build:
      context: .
      dockerfile: ./dockers/consumer/Dockerfile 
    depends_on:
      - kafka
    entrypoint: ["./wait-for-it.sh", "kafka:9092", "--", "python", "consumer.py"]


